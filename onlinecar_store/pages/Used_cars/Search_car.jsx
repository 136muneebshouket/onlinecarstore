import React, { useEffect, useState, useCallback } from "react";
import axios from "axios";
import Image from "next/image";
import Link from "next/link";
import dynamic from "next/dynamic";
import { useRouter } from "next/router";
import Head from "next/head";
import price_converter from "@/components/processing_functions/Price_calculator";
// import getServerSideProps from './filtercarfunc'

import Filtermodal from "@/components/Filters/FiIterModal/Filtermodal";

const FullLoader = dynamic(
  () => import("@/components/Modals/Loader/FullLoader"),
  {
    loading: () => <div className="loder"><h2>Loading...</h2></div>,
  }
);

const Search_car = ({   carrdata,   loadiing }) => {
  const router = useRouter();

  // console.log(carrdata)
  const [filtersheading, setFiltersheading] = useState({})
  const [filterslength, setFilterslength] = useState(0)
  // const [carrdata, setCarrdata] = useState([
  //   {
  //     id:'12345678976543',
  //     images_url: ["/images/postad-img.png"],
  //     brand: "Audi",
  //     model: "A3",
  //     variant_name: "e-tron",
  //     modelyear: "2021",
  //     city: "Lahore",
  //     Mileage: 100000,
  //     enginecc: 1300,
  //     transmission: "Automatic",
  //     enginetype: "Petrol",
  //     price: 1200000,
  //   },
  //   {
  //     id:'12345678976543',
  //     images_url: ["/images/postad-img.png"],
  //     brand: "Audi",
  //     model: "A3",
  //     variant_name: "e-tron",
  //     modelyear: "2021",
  //     city: "Lahore",
  //     Mileage: 100000,
  //     enginecc: 1300,
  //     transmission: "Automatic",
  //     enginetype: "Petrol",
  //     price: 1200000,
  //   },
  //   {
  //     id:'12345678976543',
  //     images_url: ["/images/postad-img.png"],
  //     brand: "Audi",
  //     model: "A3",
  //     variant_name: "e-tron",
  //     modelyear: "2021",
  //     city: "Lahore",
  //     Mileage: 100000,
  //     enginecc: 1300,
  //     transmission: "Automatic",
  //     enginetype: "Petrol",
  //     price: 1200000,
  //   },
 

    
  // ]);



  const getfilters = useCallback(async(filters) => {
    // console.log(filters)
    if (filters) {
      // passfilters = filters;
  
      const flattenedFilters = {};
      Object.entries(filters).map(([key, value]) => {
        if (Array.isArray(value)) {
          flattenedFilters[key] = value;
        } else if (typeof value === "object") {
          if(Object.keys(value).length > 0){
            flattenedFilters[key] = JSON.stringify(value);
          }
        } else {
          flattenedFilters[key] = value;
        }
      });
     
     if(Object.keys(flattenedFilters).length > 0){
      // console.log(Object.keys(flattenedFilters).length)
      // setFilterslength(Object.keys(flattenedFilters).length)
      const filtersString = JSON.stringify(flattenedFilters)
      router.replace({
        query: `filters=${filtersString}`, // Pass the filters as query parameters
      });
     }else{
      router.replace({
        query: ``, // Pass the filters as query parameters
      });
     }
    }
  }, []);

  useEffect(()=>{
    let filters = router.query.filters;
    if(filters){
      // console.log(filters)
      let queryobj = JSON.parse(filters);
    
      setFilterslength(Object.keys(queryobj).length)
    }
  },[])
  
  // console.log( typeof filtersheading)
  const showfilters=()=>{
    document.getElementById('filters').style.display = 'block';
  }
// console.log(filterslength)
 
  return (
    <>
    <Head>
    <title>{filtersheading.toString()}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </Head>
      <div className="main_searchcar">
      <div className="filters_sort_section">
          <button onClick={showfilters}><i className='bx bx-filter-alt'></i><span>Filters</span>{filterslength > 0 ? <span className="length_icon">{filterslength}</span>:<></>}</button>
          </div>
        <div className="head">
          <h1>{filtersheading.toString()}</h1>
        </div>
        <div className="cars_and_filters">
          <div className="filters" id="filters">
            <Filtermodal getfilters={getfilters} description={setFiltersheading} />
          </div>
          <div className="cars">
        {carrdata.map((obj, i) => {
          return (
            <>
              {/* <Link className="singlecar_link" href="#"> */}
                <div
                  key={i}
                  className="singlecar"
                  style={{
                    border: '1px solid rgb(216, 216, 216)',
                    padding: "3px",
                    display: "flex",
                    boxShadow:'0 0 11px rgba(0,0,0,0.1)'
                  }}
                >
                  <div className="car_img">
                    <Image
                      src={obj.images_url[0].img_url ? obj.images_url[0].img_url :obj.images_url[0]}
                      width={200}
                      height={200}
                      alt="loading"
                    />
                  </div>
                  <div className="car_info">
                    <div className="car_content">
                      <Link href={(`car/${obj.brand.replaceAll(" ",'-')}-${obj.model.replaceAll(" ",'-')}-${obj.modelyear}-${obj._id}`).toLowerCase()} >
                      <h3>
                        {obj.brand}{" "}{obj.model}{" "}{obj.variant_name && obj.variant_name}{" "} 
                        {obj.modelyear}
                      </h3>
                      </Link>
                      <p className="price_mbv"><strong>PKR:{obj.price}</strong></p>
                     
                      <p>{obj.city}</p>
                      <div>
                      <span>{obj.Mileage} km</span>
                      <span>{obj.enginecc}cc</span>
                      <span>{obj.transmission}</span>
                      <span>{obj.enginetype}</span>
                      </div>
                      
                    </div>
                    <div className="car_price_section">
                      <div className="car_price_fav">
                        <h3>{price_converter(obj.price)}</h3>
                        <i className="bx bx-heart"></i>
                      </div>
                      <div className="phone_num">
                        <button>Show Phone No.</button>
                      </div>
                    </div>
                  </div>
                </div>
              {/* </Link> */}
            </>
          );
        })}
        {carrdata.length == 0 && (
          <>
            <h2>No car with these filters..</h2>
          </>
        )}
        {loadiing ? <FullLoader /> : <></>}
      </div>
        </div>
      </div>
      {/* {loadiing ? <FullLoader /> : <></>} */}
    </>
  );
};


export async function getServerSideProps({ params, query }) {
  const res = await axios.get(
    `${process.env.Host}/api/getcarswithfilters/?filters=${query.filters}`
  );
  const carrdata = res.data.data;
  let loadingg = false;
  if (carrdata) {
    loadingg = false;
  }
  
  // console.log(carrdata)

  return {
    props: {
      carrdata,
      loadiing: loadingg,
      // total:pages,
      // cardata,
      // pagenum:params.page
    },
    //   revalidate: 300
  };
}


export default Search_car;
// ${obj.brand.replaceAll(" ",'-')}-${obj.model.replaceAll(" ",'-')}-${obj.modelyear}